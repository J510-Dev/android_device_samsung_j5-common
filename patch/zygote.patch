diff --git a/frameworks/base/core/jni/fd_utils-inl.h b/frameworks/base/core/jni/fd_utils-inl.h
index f245a7fc..69f9e0b5 100644
--- a/frameworks/base/core/jni/fd_utils-inl.h
+++ b/frameworks/base/core/jni/fd_utils-inl.h
@@ -341,6 +341,14 @@ class FileDescriptorInfo {
     sockaddr* addr = reinterpret_cast<sockaddr*>(&ss);
     socklen_t addr_len = sizeof(ss);
 
+    struct stat sock_stat;
+    int stat_success = 1;
+
+    if (fstat(fd, &stat)) {
+	    ALOGE("Failed to stat AF_UNIX socket (fd=%d)", fd);
+            stat_success = 0;
+    }
+
     if (TEMP_FAILURE_RETRY(getsockname(fd, addr, &addr_len)) == -1) {
       ALOGE("Failed getsockname(%d) : %s", fd, strerror(errno));
       return false;
@@ -348,6 +356,7 @@ class FileDescriptorInfo {
 
     if (addr->sa_family != AF_UNIX) {
       ALOGE("Unsupported socket (fd=%d) with family %d", fd, addr->sa_family);
+      if (stat_success) ALOGE("Unsupported AF_UNIX socket (fd=%d) with inode %d", fd, sock_stat.st_ino);
       return false;
     }
 
@@ -357,12 +366,14 @@ class FileDescriptorInfo {
     // This is an unnamed local socket, we do not accept it.
     if (path_len == 0) {
       ALOGE("Unsupported AF_UNIX socket (fd=%d) with empty path.", fd);
+      if (stat_success) ALOGE("Unsupported AF_UNIX socket (fd=%d) with inode %d", fd, sock_stat.st_ino);
       return false;
     }
 
     // This is a local socket with an abstract address, we do not accept it.
     if (unix_addr->sun_path[0] == '\0') {
       ALOGE("Unsupported AF_UNIX socket (fd=%d) with abstract address.", fd);
+      if (stat_success) ALOGE("Unsupported AF_UNIX socket (fd=%d) with inode %d", fd, sock_stat.st_ino);
       return false;
     }
 
@@ -424,13 +424,9 @@ class FileDescriptorTable {
       }
 
       FileDescriptorInfo* info = FileDescriptorInfo::createFromFd(fd);
-      if (info == NULL) {
-        if (closedir(d) == -1) {
-          ALOGE("Unable to close directory : %s", strerror(errno));
-        }
-        return NULL;
+      if (info != NULL) {
+        open_fd_map[fd] = info;
       }
-      open_fd_map[fd] = info;
     }
 
     if (closedir(d) == -1) {
@@ -458,7 +454,10 @@ class FileDescriptorTable {
         continue;
       }
 
-      open_fds.insert(fd);
+      FileDescriptorInfo* info = FileDescriptorInfo::createFromFd(fd);
+      if (info != NULL) {
+        open_fds.insert(fd);
+      }
     }
 
     if (closedir(d) == -1) {
